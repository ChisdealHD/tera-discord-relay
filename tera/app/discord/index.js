// Generated by CoffeeScript 1.10.0
var Discord, IPC, REFRESH_THRESHOLD, REFRESH_TIMER, Sysmsg, TeraStrings, conv, escape,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Sysmsg = require('sysmsg');

TeraStrings = require('tera-strings');

IPC = require('./ipc');

REFRESH_THRESHOLD = 60 * 1000;

REFRESH_TIMER = 15 * 1000;

conv = function(s) {
  return TeraStrings(s) || '(???)';
};

escape = function(str) {
  return str.replace(/"/g, '&quot;').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\.(?=com)/gi, '.&#8206;').replace(/w-w/gi, function(match) {
    return match.split('-').join('-&#8206;');
  }).replace(/w{3,}/gi, function(match) {
    return match.split('').join('&#8206;');
  }).replace(/w w w/gi, function(match) {
    return match.split(' ').join('&#8206; ');
  }).replace(/fag/gi, function(match) {
    return match[0] + '&#8206;' + match.slice(1);
  }).replace(/molest/gi, function(match) {
    return match[0] + '&#8206;' + match.slice(1);
  }).replace(/\n/g, ' ').replace(/\t/g, '    ').replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '?').replace(/[^\x20-\x7E]/g, '?');
};

module.exports = Discord = (function() {
  function Discord(dispatch, config) {
    var allGuildies, guildMembers, ipc, lastUpdate, motd, myName, path, sysmsg;
    path = config.socketName;
    if (process.platform === 'win32') {
      path = '\\\\.\\pipe\\' + path;
    } else {
      path = "/tmp/" + path + ".sock";
    }
    sysmsg = new Sysmsg(dispatch);
    ipc = new IPC.client(path, function() {
      var args, author, event, message;
      event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      switch (event) {
        case 'fetch':
          return dispatch.toServer('cRequestGuildMemberList');
        case 'chat':
          author = args[0], message = args[1];
          return dispatch.toServer('cChat', {
            channel: 2,
            message: '<FONT>' + (escape("<" + author + "> " + message)) + '</FONT>'
          });
        case 'info':
          message = args[0];
          return dispatch.toServer('cChat', {
            channel: 2,
            message: "<FONT>* " + (escape(message)) + "</FONT>"
          });
      }
    });
    myName = false;
    motd = '';
    allGuildies = [];
    guildMembers = [];
    lastUpdate = null;
    setInterval((function() {
      if (lastUpdate && Date.now() - lastUpdate > REFRESH_THRESHOLD) {
        dispatch.toServer('cRequestGuildMemberList');
        return lastUpdate = Date.now();
      }
    }), REFRESH_TIMER);
    dispatch.hook('sLogin', function(event) {
      return myName = event.name;
    });
    dispatch.hook('sChat', function(event) {
      if (event.channel === 2 && event.authorName !== myName) {
        ipc.send('chat', event.authorName, event.message);
      }
    });
    sysmsg.on('SMT_GC_MSGBOX_APPLYLIST_1', function(params) {
      ipc.send('sysmsg', params['Name'] + " joined the guild.");
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GC_MSGBOX_APPLYRESULT_1', function(params) {
      ipc.send('sysmsg', params['Name1'] + " accepted " + params['Name2'] + " into the guild.");
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GUILD_LOG_LEAVE', function(params) {
      ipc.send('sysmsg', params['UserName'] + " left the guild.");
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GUILD_LOG_BAN', function(params) {
      ipc.send('sysmsg', params['UserName'] + " was kicked out of the guild.");
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GUILD_MEMBER_LOGON', function(params) {
      ipc.send('sysmsg', params['UserName'] + " logged in. Message: " + params['Comment']);
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GUILD_MEMBER_LOGON_NO_MESSAGE', function(params) {
      ipc.send('sysmsg', params['UserName'] + " logged in.");
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GUILD_MEMBER_LOGOUT', function(params) {
      ipc.send('sysmsg', params['UserName'] + " logged out.");
      return dispatch.toServer('cRequestGuildMemberList');
    });
    sysmsg.on('SMT_GC_SYSMSG_GUILD_CHIEF_CHANGED', function(params) {
      return ipc.send('sysmsg', params['Name'] + " is now the Guild Master.");
    });
    sysmsg.on('SMT_ACCOMPLISH_ACHIEVEMENT_GRADE_GUILD', function(params) {
      return ipc.send('sysmsg', params['name'] + " earned a " + (conv(params['grade'])) + ".");
    });
    sysmsg.on('SMT_MAX_ENCHANT_SUCCEED', function(params) {
      var message, ref;
      if (ref = params['UserName'], indexOf.call(allGuildies, ref) >= 0) {
        message = params['UserName'] + " has successfully enchanted";
        message += " (+" + params['Added'] + ") <" + (conv(params['ItemName'])) + ">.";
        return ipc.send('sysmsg', message);
      }
    });
    sysmsg.on('SMT_GACHA_REWARD', function(params) {
      var message, ref;
      if (ref = params['UserName'], indexOf.call(allGuildies, ref) >= 0) {
        message = params['UserName'] + " obtained <" + (conv(params['randomItemName'])) + "> x";
        message += " " + params['randomItemCount'] + " from <" + (conv(params['gachaItemName'])) + ">.";
        return ipc.send('sysmsg', message);
      }
    });
    dispatch.hook('sGuildInfo', function(event) {
      motd = event.motd;
      lastUpdate = Date.now();
    });
    dispatch.hook('sGuildMemberList', function(event) {
      var i, len, member, ref;
      if (event.first) {
        allGuildies = [];
        guildMembers = [];
      }
      ref = event.members;
      for (i = 0, len = ref.length; i < len; i++) {
        member = ref[i];
        allGuildies.push(member.name);
        if (member.status !== 2 && member.name !== myName) {
          guildMembers.push(member.name);
        }
      }
      if (event.last) {
        ipc.send('guild', motd, guildMembers);
      }
    });
  }

  return Discord;

})();

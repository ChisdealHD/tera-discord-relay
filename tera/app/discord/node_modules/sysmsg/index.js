const { sysmsg } = require('tera-data-parser');

const map = new WeakMap();

function parseSysmsg(str) {
  if (!str.startsWith('@')) return null;

  const [id, ...args] = str.slice(1).split('\x0B');
  const params = {};
  while (args.length > 0) {
    params[args.shift()] = args.shift();
  }

  return { id, params };
}

class Sysmsg {
  constructor(dispatch) {
    const { base } = dispatch;

    this.base = base;
    this.sysmsgs = sysmsg;

    if (!map.has(base)) {
      map.set(base, {});

      dispatch.hook('sSystemMessage', 1, (event) => {
        const data = parseSysmsg(event.message);
        if (!data) return;

        const hooks = map.get(base)[data.id];
        if (!hooks) return;

        for (const hook of hooks) {
          const result = hook(data.params);

          // TODO handle other cases
          if (result === false) return false;
        }
      });
    }
  }

  static parse(...args) {
    return parseSysmsg(...args);
  }

  parse(...args) {
    return Sysmsg.parse(...args);
  }

  on(msg, cb) {
    if (msg.indexOf('_') === -1) {
      // WARNING: NUMBERS ARE AMBIGUOUS.
      // Proper sysmsg name case is preferred.
      msg = msg.replace(/[A-Z]/g, '_$&').toUpperCase();
    }

    if (!(msg in this.sysmsgs.map.name)) {
      console.warn(`[sysmsg] Unknown system message "${msg}"`);
      return;
    }

    const id = this.sysmsgs.map.name[msg];
    const hooks = map.get(this.base);
    if (!hooks[id]) hooks[id] = [];
    hooks[id].push(cb);
  }
}

module.exports = Sysmsg;
